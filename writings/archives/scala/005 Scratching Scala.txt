Scala
drypot 2010-11-29 12:28
2009.08.13

60 분짜리 비디오 봐서 다 파악할 수는 없겠지만,

F# 이 .NET 에서 움직이면서 기반 인프라 다 무시하고
자기가 Exception, Delegate, Function 다시 만들어 쓰는 것에 반해
스칼라는 기반 자바 자원 변형없이 쓰는 듯.

신기하게 보였던 건,
이건 자바에서 델리게이트 따로 만들어 쓰지 않는 것에 대해 발견한 첫 잇점으로 보이는데,
람다 펑션을 자바 스럽게 클래스로 봐서 람다를 계승해 내릴 수가 있음, @.@

class Child extends { ... lambda ... }  { class body }

저걸 어떻게 응용할지는, =,=

자바쪽 와서 처음 보는 Partial Class 지원이 있고.

펑션 정의 기능이 막강해서 F# 처럼 새로운 문법을 추가해 쓰는 것이 가능하던데,
이건 데모 페이지 몇 장으로 봐서는 아직 감이 안 오나,
FP 라 언어 자체에 break 기능이 없는데, 이걸 라이브러리로 해결하고 있었음,

그루비 처럼, { } 블럭을 인자로 받을 수 있음.
이 개념은 진짜 코드 이뿌게 하는데 대박인 거 같음.

C# 에서 using 을 저 개념으로 라이브러리로 제공하던데 이제 자바쪽에서도 이런게,

using ( file open ) { file operation } // close 는 자동

프로젝트 템플릿이나 개발 도구 지원이 좀 안정되면,
그 다음으로 아마 자바 전체 인구중 앞으로 3 년안에 20~30% 는 그루비를 부분적으로나마 써보긴 할 것 같고,
(자바 코드 긁어다가 그루비 소스에 넣으면 그냥 실행됨. 호환성 100%, 이게 좀 큰 듯)

괴팍한 5~8% 정도는 스칼라를 쓰지 않을까 싶음, ^^
언어는 좋아보이고 발전 가능성도 많은데, 회사원들이 귀차니즘을 극복할 수 있을지,

이때 쯤 필요해지는건,,,,
각 언어별 컴파일러들이 협업하는 인프라, =,=

그루비만 해도 자바 코드하고 같은 프로젝트에서 서로 교차 참조 할 수 있는데,
지금은 그루비 컴파일러 1 차 패스로 Stub.java 코드 출력해서,
Stub 하고 쌩 java 코드 해서 javac 로 컴파일 하고,
컴파일 결과하고 groovy 소스코드 2 차 컴파일하고 하는데, =,=

언어들 여러개 섞어 쓸 필요가 발생하기 시작하면,
여기에 대한 먼가 공통 솔루션이 필요해 질 것 같단,

자바가 컴파일 결과를 한 덩어리로 안 뭉치고,
class 쪼가리로 놔두는 것이 이럴때 장점이 있을 줄은, =,=

자바 쪽 와서 프로젝트 안 에 여러 언어 섞어 쓰는 건 좀 신선한 것 같음.
.NET 에서는 이런 거 몇 년 안에는 안 해줄 듯.
Edit
drypot 2010-11-29 12:30
2009.12.05

리딩 시작.

스터틱 언어로 돌아가고 싶어지고 있음.
프로그래밍 언어가 신체리듬의 밸런스에 영향을 주는 것을 많이 느끼고 있음.
Groovy 는 손가락은 편해지는데 정신동력을 좀 많이 소모하는 것 같음.
육체 노동이 조금 줄어들면서 정신동력을 적게 소모되는 놈이 있음 좋겠다 싶음.
Scala 가 답이 될 수 있으려나.

늙어가면서 쓸 수 있는 언어가 다이나믹 언어라 생각했는데 조금 틀렸던 것 같음.
조금 더 저수준에, 컴퓨터 도움을 런타임에 받을 것인지 코딩 타임에 받을 것인지 좀 밸런싱이 필요.
Java 는 너무 불편하고, Groovy, Python, Ruby 는 너무 나간 것 같음.
그러고 보면 C# 이 참 훌륭함. =,=

Scala 에 한번 기대를,
Edit
drypot 2010-11-29 12:30
2009.12.06

언어가 꽤 일관적인 것 같음.
첫날 기분은 매우 좋음.

F# 처럼 OO, Imperative 세계에서 온 사람들에게 너무 불편하게 하지도 않고 있음.

이름이 Scalable Language 에서 왔다고 하더니,
이것 저것 막 섞은 짬뽕국물같지 않고
바탕에 꽤 독특한 자기 철학도 있는 것 같음.

근데 이러다 언제 뒤통수 때릴까.
Edit
drypot 2010-11-29 12:31
2009.12.07

람다를 참 희한게도 만들지

def filesEnding(query: String) = filesMatching(query, _.endsWith(_))

def filesEnding(query: String) = filesMatching(query, (x, y) => x.endsWith(y))

def filesEnding(query: String) = filesMatching(query, (x: String, y: String) => x.endsWith(y))

다 같은건데, 다른 언어에서는 보통 2 단계나 3 단계 정도 쓰는데,
1단계 처럼 언더바(_)로 람다 젠하는 건 좀 뚜러지게 봐야 익숙해 지겠음. =,=
Edit
drypot 2010-11-29 12:32
2009.12.07

인자 없은 평션 호출할 때 () 를 빼버릴 수 있는데,
이것 때문에 field 억세스하는 것과 인자없는 메서드 호출하는 문법이 같아짐.
꽤 이쁨.

게다가 이것 때문에 상위 클래스 인자없는 메서드를 서브클래스의 필드로 오버라이딩하는 것이 허락됨. =o=

자바나 C# 이나 첨에 필드로 쓰다가 펑션으로 바까야할 경우
쫒아다니며 () 쳐주느라 짜증났었는데 이런 문제 해결.

대략, Scala 설계한 사람이 경험이 매우 많은 것 같음.
매우 아름다움.
Edit
drypot 2010-11-29 12:32
2009.12.08

챕터 넘길 때마다 감탄연발.

Trait 이란 걸로 C++ multiple inheritance 와 Java Inteface 의 문제점들을 극복하고 있는데,
바쁜 사람들은 Programming in Scala 12 장 Trait 만 봐도 혹 할 것 같음.
Edit
drypot 2010-11-29 12:33
2009.12.09

펑셔널 언어라 match 가 좋을 줄은 알았지만 좀 너무 강력하다. =,=
사기치는 것 같네. =,=

왠만한 프레임웍의 매치 라이브러리는 울고 갈 것 같음.
Edit
drypot 2010-11-29 12:33
2009.12.11

규모있는 어플리케이션 개발은 스터턱 언어 쓰는 것이 맞는 것 같음.
다이나믹 언어 갔다왔더니 스터틱 언어의 장점이 훨 잘보이는 듯.

문제는 기존 스터틱 언어들이 매우 장황하다는 것인데,
F# 이나 Scala 나 아님 (저 두 언어가 펑셔널 기반이라 매우 마이너해서 =,=),
차기 스터틱 언어들은 매우 타이트해져서 나올 것 같음.

장황하지만, 지금 기세로라면 Java, C# 앞으로 5~10 년은 이상은 더 버틸 것 같은,

Scala 17 쳅터 나가는 중인데, 진짜로 스펙이 시종 일관임... 진짜 일관적임.
만든 아저씨가 강박증 있는 듯.

매우 맘에 듬.
Edit
drypot 2010-11-29 12:35
2009.12.14

object Demo {
     lazy val x = { println("initializing x"); "done" }
}

lazy initialization 지원이 좋음.
Groovy 에서는 버그 땜에 static field 에는 쓰지 못했는데...

lazy init 가 근간에 본 제일 도움 되는 코딩 도우미 같음.
오브젝트 초기화 순서 복잡할 때 아주 깔끔하게 만들어 줌.

(2010.11 월, 옮기면서 코멘트, lazy 에 싱크로나이제이션 오버헤드가 있음)
Edit
drypot 2010-11-29 12:35
2009.12.15

Scala 가 퓨어 펑셔널하지 않다는 비평이 많아서 그런가보다 했었는데, 진짜 그런 것 같음.
리스트 라이브러리가 겉으로는 이뮤터블, 펑셔널한데, 구현은 임퍼레이티브하게 루프 돌려서 만들어 놨음.
저자 말로는 이게 퍼포먼스가 좋다고 함. (당연)

하긴 모든 경우에 대해서 루핑 펑션이 있기도 힘들고,
수작업으로 만들 때 항상 테일 리커시브 하게 만들 수 있는 것도 아니고,
펑셔널 로직 볼 때 루핑이 더 좋아 보이는 경우도 많음.

대신에 Scala 에서는 루핑 구문이 기존 임퍼레이티브 언어 같지 않고 되게 짧음.

for (x <- xs) buf += x + 1

좀 확장되어 있기도 하고

for {
   p <- persons
   n = p.name
   if (n startsWith "To")
} yield n
Edit
drypot 2010-11-29 12:36
2009.12.15

while 은 평범한 바이트코드로 내리는 것 같은데
for 는 모두 루핑 펑션으로 매핑하는 거였음.

루핑 펑션이 임퍼레이티브 for 에 비해서 간단하다고 생각했는데,
그거도 중복되면 복잡해지니까 이거 간단하게 하는 용도로 for 를 만들었나 봄.
스칼라 for 는 임퍼레이티브 for 하고 많이 다름.

for (
   b1 <books;
   b2 <books if b1 != b2;
   a1 <b1.authors;
   a2 <b2.authors if a1 == a2
) yield a1

이거 컴파일하면 아래와 같은 구문으로 변경.
C# LINQ 가 이런거 보고 만들었나 봄.

books flatMap (b1 =>
   books filter (b2 => b1 != b2) flatMap (b2 =>
       b1.authors flatMap (a1 =>
           b2.authors filter (a2 => a1 == a2) map (a2 =>
                a1))))
Edit
drypot 2010-11-29 12:37
2009.12.17

책 마지막 100 페이지 정도 남겨놓고 있음.
전체 윤곽이 좀 잡혀서 이것 저것 조사(?) 하고 있는데,
스칼라 코드 상으로는 쌩필드 접근을 못하나봄.
아예 이렇게 해버리니 먼가 속이 편하긴 함.
모든 게 메서드.

디스어셈블해보니 프라이빗 val, var 접근하는 클래스 내부 코드도
모두 메서드 통하네.

일관성의 왕자인 것 같음. =,=
Edit
drypot 2010-11-29 12:37
2009.12.20

아, NetBeans Scala Plugin 많이 좋아졌네.

val l = List(1,2,3)
for(x <- l) {
    println(x.abs)
}
val l2 = List("Apple", "Pine", "Banana")
for(y <- l2) {
    println(y)
}

위 같은 수식에서 x, y 타입 인퍼런스 정확하게 해줌.
y 다음에 점찍으면 타입이 뭔지 딱 보여주고 메서드까지 쭉.

Eclipse Scala Plugin 은 버그 땜에 에디팅도 불가능한 상태고.
Idea 에서는 타입 직접 안 적어주는 애들 인퍼런스 아직 안 됨.
Edit
drypot 2010-11-29 12:38
2009.12.21

NetBeans Scala Plugin 에 문제 발생. =,=

여러 모듈로 분해한 경우,
다른 모듈의 업데이트 내용을 다른 모듈에서 인식을 못함. =,=
예를 들어 라이브러리 모듈에 어떤 메서드의 인자가 하나 늘어난 경우,
메인 모듈에서 인식을 못하고 붉을 줄을 그어버림.
문서 찾아보니 원래 그렇다고, 왠지 당장 고쳐줄 분위기가 아닌 듯.
넷빈을 재시동 해야 업데이트 됨. =,=

반대로 IDEA 9.0 정식판에서 Scala Plugin 이 좋아졌음. =,=
NetBeans 처럼 타입 인퍼런스 능력이 좋아짐.
좀 느리긴 한데 for 문의 x 타입을 찾아주네.

다행히 NetBeans 으로 이주 안 해도 되게 되었음. =o=

현재로는 역시 IDEA 가 지능은 제일 뛰어남.
근데 이 사람들은 UI 프레임웍 좀 바깠으면. =,=
Edit
drypot 2010-11-29 12:40
2010.01.01

난 요즘 리눅스 문서 보구 있음
일단 이거 보구 서버 엎고,
그러면 리눅스 또 다 까먹겠지,

담 GlassFish 어플리케이션 개발쪽 볼꺼구,
자바 웹 어플리케이션 개발에 Spring 을 기반으로 하는 방법이 있고,
EJB 기반 하는 방법이 있고,
아예 없이 하는 방법이 있고,
Grails 나 Lift, RoR 같은 홀로서기 프레임웍 방식이 있는데,

나한텐 일단 Grails, Lift, RoR 방식은 잘 안 맞는 것 같음.
다른 스텐다드하고 결합하는데 좀 껄끄럽고,
내가 필요로 하는거 이상 너무 많이 들어 있고,
편리하게 해주는 것도 많지만 그만큼 제약도 많음. 해골이 복잡해짐. ㅋ
걍 나한테 안 맞는 것 같음.

Spring 은 계속 조금씩 트라이 하고 있는데,
왠지 삼류같음. =,=
먼 말인지도 좀 알겠고, 왠지 편할 것 같기도 한데,
그래도 삼류같음. =,=

EJB 는 영역이 광대하고 CORBA/IIOP 영향 아래 있기도 한 것 같아서
불필요한 부분들 많을 것 같은데,
딱 필요한 부분만 뽑아 쓰면 Spring 없이 먼가 할 수 있지 않을까 싶어서
나중에 다시 보려고 생각중.

EJB 재시도 해보구 영 아니면,
다 버리고 걍 또 사제 프레임웍으로, =,=

이때즘 되면 Scala 또 생각이 잘 안 날 것이므로,
재독 한번 해주고, =,=

그리고 재개발 들어갈 듯.

슬릭 재개발 잘 끝나면,
디비 Postgres 로 바꾸고,

일단 스케줄은 이럼.

난 책이나 메뉴얼 일독 안하면 불안해서 멀 못함. ㅋ
쭉 다 바야함. =,=

Eclipse 에서 Scala 코딩되?
난 마구 에러나고 다운되서 못쓰겠던데.

에디터 자체는 IDEA 가 3 강 IDE  중에 제일 훌륭함.
핫키 세팅도 좋아서, 마우스 안 쓰고 다됨.
근데 도킹 메니저가 후진거하고,
Output 윈도우 폰트 조절이 별도로 안 됨. =,=
나한텐 이게 좀 치명타. 모니터가 작아서. =,=

NetBeans 는 음, 먼가 매력이 있음.
일단 기본 빌드 시스템이 Ant, Maven 임. 딴거 없음.
Ant, Maven 하고 IDE 빌드시스템하고 연동시키느라 고민 안 해도 되니 아주 속편함.
그리고 한 프로젝트만 쓴다면 Scala 지원도 매우 훌륭.
프로젝트 두 개 나나서 하면 두 프로젝트간 인텔리센스 정보 교환을 못함. =,=

이클립스가 나쁜 건 아닌데,
자바 말고 타 언어쓰는데 계속 문제가 좀 발성하는 것 같음.

지금은 NetBeans 하고 IDEA 하고 가끔 바까가면서 쓰고 있는데,
요즘 개발이란 것이 무조건 타이핑 빨리 된다고 좋은 것이 아니라,,,
NetBeans 도 꽤 나름 편안함.

var, val 은 컴파일 하면 모두 get/set, get 버추얼 메서드로 바뀜.
변수는 직접 접근 안됨 스칼라에서는.
모든게 버추얼 메서드.
걍 궁금한거 있으면 컴파일하고 바이트코드 덤프해 보는 것이 속편함.
글 읽는 것 보다 훨씬 이해 잘 됨. =,=

나 프리젠테이션 레이어 고민하다가 걍 JSP 쓸까 생각중.
Grails 나 Lift 같은거 쓰면, 문제가 다른 부분 이전할 때 먼가 기술세트를 통체로 이전시켜야 해서
고달파 지더라고. =,=
프리젠테이션 JSP 쓰면 중간 프레임웍 멀로 바까도 일단 되긴 할 것 같아서 무난하게 가려고 함.

비슷한 이유로 ORM 안 쓰고,  iBATIS 도 안 쓸지도 모르겠는데,
Hibernate, GORM, Lift ORM 쓰면 다른데로 로직 이전했을 때 SQL 처리부분 다시 만들어야해서,
걍 쌩 SQL 입력하는 방식이 좋은 것 같음.
iBATIS 쓸까 하다가 걍 쌩 JDBC 로 점점 쏠리고 있음.
요즘 깨닫고 있는데 좀 불편하더라도 명쾌한 것이 내 적성에 맞는 것 같음.
프레임웍 덕지덕지 끼기 시작하면 먼가 잘 안 됨. 자유롭지도 못하고. ^^
Edit
drypot 2010-11-29 12:42
2010.01.29

C# 이 잘 관리되고 있긴 하지만 요츰 언어들에 비해서는 장황함.
F# 은 매우 F 적인 언어인데 F 특성에 충실하나 OO 적인 면이 좀 불편하고 이저것 다하려다 보니 좀 난잡함.

Ruby, Phython, Groovy, 다이나믹 언어는 첨엔 일을 쉽게 만드는 것 처럼 속이다가
나중엔 프로젝트 관리가 불가능하게 만들어 버림.

java 는 요즘 언어들 중에서는 제일 후졌음. 반대로 배울 것이 별로 없으니 교육이 쉽고,
도구 지원과 + 인구로 밀고 있음. =,=

Scala, 제일 아름다움. 만든 사람이 먼가 알고 만들었음. 나머지들은 스칼라에 비하면 걍 삼류. =,=

C# 도 정갈하나 Scala 에 비할 바가 못됨.
F# 이 사실 정통 F 언어라고 할 수 있지만 OO 월드하고 붙이기는 불편함.
Scala 는 중요한 F 특성이 몇 가지 빠졌지만, 양쪽 세계에 대해서 매우 잘 밸런스되서 쓰기 좋음.
Ruby, Phython, Groovy, 기능 좋은 언어들이나 삼류를 벗어나기 힘듬.
java, 지금 기준으로 보면 만들다 말았음. 새 기능 추가도 무지무지 느림.

Scala 가 성공할까? 당장은 힘들 것 같음 + 매우 불투명.
도와주는 사람들은 있지만 스위스 산골(?)에서 만들고 있으니. =,=
게다가 모 알고 나면 별거 아니지만 컨셉이 차원이 좀 있어서 java 공부하던 행자들한테 바로 가르치기도 뭐함. =,=
혼자 사용하는데는 현재 큰 무리는 없음.
컴파일러 잘 되고, NetBeans 에서 IDE 지원도 좋아서.

올해 M$ 가 F# 마케팅하면서 F 언어데 대한 관심이 좀 높아지면,
반대 급부로 자바 쪽에서 Scala 에 대한 이야기가 더 많아질 수 있지 않을까 기대중.

C#, Java 와 비교되는 Scala 의 위대한 기능 딱 하나 찝으라면 Trait.
Trait 보면 C# 이나 java 로 라이브러리 만들기 싫어질꺼임.
Edit
drypot 2010-11-29 12:43
2010.01.29

스터틱 언어에서는 멀 하려해도 타입을 일단 만들어야 소통이 되는데,
다이나믹 언어에서는 프로퍼티나 메서드를 오브젝트에 막 바로 붙일 수 있기 때문에,
이게 사실 너무 편해서 귀찮게 타입 안 만들고 막 바로 붙여쓰게 됩니다.

인텔리센스는 당연히 동작 못하고, 첨에 코딩할 때는 그래도 내가 어디서 뭘 어떻게 붙였는지 기억이 나지만,
일주일 지나서 내가 짠 코드보면 공포에 떨게 됩니다.
어디서 뭘 어떻게 붙였는지 기억이 안나서. =,=

그래서, 다이나믹 언어는 나중에 프로젝트 관리가 불가능하게 됩니다.
Edit
drypot 2010-11-29 12:43
2010.02.02

컬렉션에 Lazy Evaluation 구현하는 법
http://debasishg.blogspot.com/2008/10/map-composition-in-scala-or-virtues-of.html
Edit
drypot 2010-11-29 12:44
2010.02.04

이번에 스칼라 2.8 베타 나오면서 이클립스 플러그인도 새로 나왔는데,
성능 괜찮은 것 같음.

고로 통합환경은 eclipse / NetBeans / IDEA 아무거나 써도 될 것 같음.
그러나 또 언제 뻑날 지 모름. ^^
Edit
drypot 2010-11-29 12:44
2010.02.04

TDD 한번 해볼려 했더니만,
테스트 툴이 스칼라 버전 잘 못쫒아오네.
에러 작열하길레 포럼 보고 snapshot 리포지터리꺼로 맞췄는데,

흠, 이번엔 maven 플러그인이 문제. =,=

걍 자바 쓸까. =,=

귀찮아 죽겠네. ㅋ
Edit
drypot 2010-11-29 12:45
2010.02.16

http://creativekarma.com/ee.php/weblog/archives/

프로그래밍 40 년 하셨다는 분인데,
2008 년도에 스칼라에 대해서 좋은 분석글을 써주셨음.

2009 년도에 프로그래밍 계를 써나심. =,=
Edit
drypot 2010-11-29 12:45
2010.04.10

당분간 스칼라 이상가는 언어는 좀 나오기 힘들 것 같음.
너무 잘 만들었음. =,=

Java, Ruby, Python, Groovy, C#, F# ===> 모두 Scala 로 모여야할 듯. =,=

코드량이 Groovy 수준으로 줄면서 Typed 라 뭐 감동이 장난 아님. =,=
게다가 Trait, Pattern matching 때문에 기존 언어들에서 생각지도 못한 일을 할 수가 있어서 다른 애들이 게임이 안 됨. =,=

더불어 현재 Scala 주위에 모이는 인간들이 똑똑한 인간들이 많은 것 같음.
Edit


2010.07.13

뜬금없는데, 트위터하고 있다보니
혼자 Scala 쓰지 말고 남들 쓰는 쌩 Java 쓰는 것이 좋겠다는 생각이 듬.
질보다 소통의 우월함,,, 인가.

바꿀까 몽땅 다시 Java 로. =,=
Edit
drypot 2010-11-29 13:07
2010.07.14

격돌하고 있는 핵심은,
Scala 로 되는거 어짜피 Java 로도 다 할 수 있다 어찌되었든 +
Java 인구가 많다 +
Scala 쓰는 게 나 납다. =,=

*

중딩때 서울시 컴퓨터경진대회... 모 이런거들 많이 해보셨을듯 ㅋ
거 나갔는데 그때 한참 파스칼에 심취해있던 때라,
Apple II + CP/M + Turbo Pascal 로 경진대회 문제 풀고 있었음.
그 수백명 앉아 자판 뚜드리고 있는데 파스칼 쓰는 사람 물론 나 혼자였겠지. =,=
Basic vs Pascal

물론 파스칼 쓴다고 문제 더 잘 푸는 것도 아니고,
상도 못 받았지만,
Basic 으로 그짓하고 있었으면 너무 끔찍했을 듯. =,=

지금 완전 똑 같은 상황. =,=

이클립스에서 Scala 지원이 좋아져야 인구가 늘든 말든 할 텐데,
현재 매우 초보적인 수준.

그래도 다운은 안 되고 되긴 함.
import javax. ... 이런데서 코드 컴플리션 안 되고. =,=
근방에 조금만 신텍스 이상해도 코드 컴플리션 안 되고. =,=

IDEA Scala 에디터는 진짜 환상인데,,,
어쨌든 이클립스에서 되야 인구가 늘든 말든,,,

Scala 쓰면서 시간 무진장 더 잡아 먹는 거는 사실.
Java 로 하면 걍 대충 비비면 다 되는 걸.
Edit
drypot 2010-11-29 13:10
2010.07.15

Scala:

lazy val result = PostSearcher.search(params.search.searchQuery, conn)

Java:

private PostSearchResult result = null;
public PostSearchResult getResult() {
	if (result == null) {
		result = PostSearcher.search(params.search.searchQuery, conn);
	}
	return result;
}

근데 저 긴 자바 코드도 괜찮아 보임... 이상하게.
Edit
drypot 2010-11-29 13:11
2010.07.19

Scala 코드 Java 로 옮기기 시작했는데,
로직에다가, 늘어나는 잡다한 데코레이션, 늘어나는 파일들하면 코드량 5 배는 늘어나는 것 같은데,
Scala 쓸때 과하게 막썼다는 반성이 좀 되네.
너무 모으고, 축약했었던 것 같음.

Java 코드 보니 불필요한 키워드들도 사실 좀 많지만,
먼가 제 자리 잡아주는 느낌이 듬.

라이브러리에서는 저렇고,
어플리케이션 로직부 다시 쓰기 시작하면 코드 엄청 늘어질 듯. =,=

*

Java 코딩하면서 이클립스의 새로운 면모를 보고 있음. =,=
Edit
drypot 2010-11-29 13:12
2010.07.22

Java 수작업 Closure 도 써보니 괜찮은 것 같음. =,=

Java 컴파일러 Exception 체크 때문에 짜증나 죽겠네.
이거 디자인한 사람 땅에 뭍어야.


drypot 2010-11-29 12:47
2010.11 현재

주위 사람들에게 스칼라 공부하라고 말하기 힘들 것 같아서 나도 자바 사용중.
자바 환경 자체에 공부해야할 것이 너무 많아서 스칼라 짐까지 지우기 너무 미안함.