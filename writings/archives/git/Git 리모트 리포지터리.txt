Git 리모트 리포지터리


### 리모트 리포지터리

Git 는 여러 리모트 리포지터리를 두고 업데이트된 내용을 fetch 하거나 push 할 수 있다.
리모트 리포지터리는 로컬 머신의 다른 디렉토리일 수도 있고 물리적으로 다른 기계일 수도 있다.
리포지터리 주소는 긴 URL 로 정의되는데 이를 줄여쓰기 위해 `git remote` 명령으로 이름을 등록해 사용한다.
리모트 정보는 .git/config 파일에 저장된다.

리모트를 추가한다.

	$ git remote add <remote> <remode url>

등록된 리모트 목록을 출력한다.

	$ git remote -v

리모트에 관한 정보를 표시한다.

	$ git remote show <remote>

리모트의 이름을 바꾼다

	$ git remote rename <current name> <new name>


### 리모트 브랜치

리모트 브랜치는 리모트 리포지터리에 있는 브랜치를 의미하는 것이 **아니다**.
리모트 리포지터리에 있는 브랜치들의 상태를 반영하기 위한 **로컬** 브랜치다.
리모트 리포지터리의 <branch> 에 대한 리모트 브랜치는 <remote>/<branch> 가 된다.
예로 리모트 `origin` 의 `dev` 브랜치에 대한 리모트 브랜치는 `origin/dev (refs/remotes/origin/dev)` 가 된다.

`fetch` 명령을 실행하면 리모트 브랜치는 자동으로 업데이트 된다.

	$ git fetch <remote>

리모트와 리모트 브랜치들을 모두 삭제한다.

	$ git remote rm <remote>

리모트에서 삭제된 브랜치에 대한 리모트 브랜치들을 삭제한다.

	$ git remote prune <remote>

리포지터리의 심볼 레퍼런스 목록을 본다.

	$ git show-ref

리모트 리포지터리의 심볼 레퍼런스 목록을 본다.

	$ git ls-remote <remote>


### 트래킹 브랜치

리모트 브랜치에서 `checkout` 하는 브랜치는 트래킹 브랜치가 된다.
트래킹 브랜치는 `push/pull`  에 사용될 리모트 브랜치가 지정된 브랜치다.
이 연결 설정은 Git 설정 파일에 들어간다.

예를 들어 현재 브랜치가 트래킹 브랜치라면
`push` 할 때 어떤 리모트의 어떤 브랜치를 목표로 할 것인가를 자동으로 알 수 있고,
`pull` 할 때 리모트의 브랜치들을 다운로드한 후 어떤 리모트 브랜치를 자동으로 머지할지 알 수 있다.

리모트 브랜치에서 트래킹 브랜치를 생성하는 예.

	$ git branch mydev origin/master

위 명령은 아래 설정을 생성한다

	[branch “mydev”]
		remote = origin
		merge = refs/heads/master

현재 브랜치가 `mydev`  일 때 `pull` 하면
`origin` 리모트를 `fetch` 하고 `origin/master` 브랜치를 `mydev` 에 머지하라는 뜻이다.


### 리모트 리포지터리 클론

리모트 리포지터리를 클론하면 리모트를 등록하고 트래킹 브랜치를 만드는 작업을 한번에 할 수 있다.

	$ git clone <remote url>

`clone` 명령은 리모트 리포지터리를 복제한 후 리모트 리포지터리의 모든 브랜치에 대하여 리모트 브랜치를 만들고
활성화된 브랜치에서 새 브랜치를 `checkout -b` 한다.
클론시 리모트 리포지터리의 기본 이름은 `origin` 이 된다.

<remote url> 에 여러가지 프로토콜을 지정할 수 있는데 git 전용 프로토콜이 전송효율은 제일 좋다.
단, 수정 내용을 `push` 하려면 ssh 프로토콜을 사용해야 한다.


### 리모트 펫치

리모트의 업데이트된 내용을 가져온다.

	$ git fetch <remote>

리모트 브랜치들도 업데이트 된다.
단, 리모트 커밋들을 가져오기만 할 뿐 트래킹 브랜치에 머지하진 않는다.

`fetch` 한 브랜치를 로컬 브랜치에 머지할 수 있다.

	$ git checkout <local branch>
	$ git merge <remote>/<remote branch>

`fetch` 한 브랜치에서 트래킹 브랜치를 분기할 수 있다.

	$ git checkout -b <local branch> <remote>/<remote branch>

등록된 모든 리모트의 업데이트 내용을 한번에 가져올 수 있다.

	$ git fetch --all

다음 명령도 비슷한 작업을 한다.

	$ git remote update


### 리모트 머지

`fetch` 명령은 리모트의 업데이트된 내용을 다운로드하고 `fetch` 한 레퍼런스들을 `FETCH_HEAD` 에 저장한다.
`FETCH_HEAD` 는 `merge` 에 이용할 수 있다. 리모트 브랜치들을 트래킹 브랜치들에 머지한다.

	$ git fetch
	$ git merge FETCH_HEAD

`git fetch` 와 `merge` 명령은 다음 한 줄로 할 수도 있다.

	$ git pull

`merge` 중 충돌이 나면 수작업후 커밋을 하거나 `merge` 전, `fetch` 직후 상태로 갈 수도 있다.

	$ git reset --hard ORIG_HEAD


### 리모트 푸쉬

로컬 리포지터리에 새로 생성한 브랜치는 부모 리포지터리에 보이지 않는다.
로컬 리포지터리에서 브랜치를 삭제하는 것도 부모 리포지터리에 전파되지 않는다.
새로운 커밋들을 포함해 이런 변경 내용은 리모트에 `push` 해야 한다.

로컬 리포지터리에서 작업한 내용을 리모트 리포지터리로 전송한다.

	$ git push <remote> <local branch>:<remote branch>

줄여 쓰면,

	$ git push <remote> <branch>

리모트에 <branch> 브랜치가 없었다면 새로 생성된다.
기존 브랜치에 `push` 한 내용은 fast-forward 머지된다.
리모트에 변화가 있었다면 먼저 `fetch` 한 후 로컬 리포지터리에서 변경 내용들을 `merge` 한 후에 `push` 해야한다.

refspec 에서 `:<remote branch>` 만 입력하면 해당 리모트 브랜치는 삭제된다.

	$ git push <remote> :<remote branch>

