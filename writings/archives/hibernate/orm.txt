ORM
drypot 2010-11-28 13:38
ORM 에 관한 생각의 변화들

2009.09.26

Grails 에 Groovy 의 다이나믹한 언어 특징을 많이 사용해서 Hibernate 를 포장한 GORM 이 따라온다.
GORM 바로 써도 되는데 배경지식 쌓을 겸 M$ LINQ 정도 복잡도 예상하면서 Hibernate 문서를 보기 시작했는데
Java 언어 자체에서 DSL/Extension Method 지원이 없다보니 후덜덜하게 복잡하다.

눈딱 감고 GORM 바로 써보고 퍼포먼스 정 안 나오면 다른 수를 강구해야 한다.

GORM 이 Hibernate 복잡도 얼마나 줄여줄 수 있는지는 아래 글에,

ORM in Dynamic Languages
http://queue.acm.org/detail.cfm?id=1394140
Edit
drypot 2010-11-28 13:45
2009.09.29

ORM 이 개발 상황에 따라 미묘하게 장단이 갈리는 것 같다.

M$ Linq 쓸 때는 예전 방식으로 디비 스키마 디자인 하고, 이걸 C# Class 로 자동으로 내리고,
여서부터 Partial Class / Extention Method / Linq DSL 등 지원이 많아서 이음매 없이 무난히 썼는데,
(OO 디자인에서 디비 스키마 만드는 것은 애초에 안 되서 고민도 안 한,)

하이버네이트는 OO 디자인 쪽에서 시작하는 것으로 약간 중심이 있는 것 같아서
처음 부터 스키마 주도권에 대한 정체성 혼란이 좀 있었고,
(나중에 알았지만 이건 꼭 이렇지 않다.)
Java 언어 자체에서 편의성 지원이 없어서 HQL 등 다른 것을 또 거쳐야 하는 부담감이 있다.

GORM 와서는 하이버네이트 바로 쓰는 것보다 손가락 노가다는 주는데,
너무 자기가 주도권을 가지려고 해서 스키마가 Groovy 하고 DB 에 두벌 존재해야 하는 문제가 발생하는 중.
(나중에 알았지만 이것에 대한 판단도 옳지 않았다)

OO 중심 사고가 당장 현재 개발 언어가지고 접근하기는 편리할 수도 있지만,
DB 는 10 년 넘게 가는 일이 많은 반면, 그와중에 개발 플랫폼이나 언어는 두세차례 바뀌게 되니,
경험상 데이터가 어플리케이션 보다 생명이 훨씬 길다고 생각하는데,
하이버네이트 처럼 디자인을 Java 중심으로 가져가면 언젠간 피가 역류할 것 같은 불안감이 있다.
RDB 성공요인도 어플리케이션과 분리되어 존재한다는 것이 아니었는가.

하이버네이트 자체는 훌륭한 것 같다.
그런데 빠르게 바뀌는 개발 언어 사이클을 버텨줄 수 있을지 현재는 의문스럽다.

또 한 가지 큰 변수가 내가 다이나믹 언어를 쓴다는 것인데,
다이나믹 언어에서는 Java 에서 처럼 클래스 선언을 다 해놓지 않아도 되니,
SQL 에서 리턴되는 오브젝트를 그냥 바로 써도
Java 에서 클래스 선언한 것과 비슷하거나 더 간단한 문법밖에 필요하지가 않다.
몇 년 후에 다이나믹 언어 기반이 좀 넓어 지면 ORM 과 Pattern 은 한번 조정을 받을 것 같다.
(언제 또 적겠지만 다이나믹 언어에 대한 현재의 생각은 이때와 180 도 다르다.)
